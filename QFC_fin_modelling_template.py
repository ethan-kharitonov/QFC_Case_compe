
class Market:
    transaction_fee = 0.005
    HC_data = [
    115.2523937, 115.1992067, 115.150072, 115.1048459, 115.0633859,
    115.0255542, 114.9912184, 114.9602509, 114.9325297, 114.907937, 114.88636,
    114.86769, 114.8518228, 114.8386581, 114.8280997, 114.820055, 114.8144351,
    114.8111547, 114.8101316, 114.811287, 114.8145453, 114.8198336, 114.8270821,
    114.8362236, 114.8471936, 114.8599302, 114.8743739, 114.8904676, 114.9081563,
    114.9273873, 114.9481101, 114.9702761, 114.9938385, 115.0187525, 115.0449752,
    115.0724652, 115.1011828, 115.1310901, 115.1621504, 115.1943287, 115.2275914,
    115.2619061, 115.2972419, 115.3335691, 115.370859, 115.4090844, 115.4482191,
    115.4882378, 115.5291164, 115.5708318, 115.6133619, 115.6566853, 115.7007817,
    115.7456316, 115.7912162, 115.8375177, 115.8845189, 115.9322034, 115.9805554,
    116.02956, 116.0792026, 116.1294696, 116.1803478, 116.2318245, 116.2838878,
    116.3365261, 116.3897285, 116.4434844, 116.4977839, 116.5526174, 116.6079758,
    116.6638504, 116.720233, 116.7771156, 116.8344908, 116.8923514, 116.9506907,
    117.0095022, 117.0687798, 117.1285178, 117.1887105, 117.2493529, 117.3104399,
    117.3719671, 117.4339298, 117.4963241, 117.559146, 117.6223919, 117.6860582,
    117.7501419, 117.8146399, 117.8795493, 117.9448674, 118.0105918, 118.07672,
    118.1432491, 118.210176, 118.2774959, 118.3452002, 118.413272, 118.4816746,
    118.5503268, 118.6190457, 118.687419, 118.7545221, 118.8183222, 118.8745708,
    118.9153873, 118.929903, 118.9126579, 118.8745067, 118.8313334, 118.7899347,
    118.7518194, 118.7171858, 118.6859729, 118.6580719, 118.6333673, 118.6117458,
    118.5930981, 118.5773186, 118.5643062, 118.5539633, 118.5461962, 118.5409149,
    118.5380328, 118.5374667, 118.5391364, 118.5429652, 118.5488791, 118.556807,
    118.5666806, 118.5784342, 118.5920047, 118.6073314, 118.6243561, 118.6430228,
    118.6632775, 118.6850686, 118.7083464, 118.7330629, 118.7591725, 118.7866309,
    118.8153958, 118.8454265, 118.8766839, 118.9091304, 118.94273, 118.977448,
    119.0132511, 119.0501074, 119.0879863, 119.1268581, 119.1666947, 119.207469,
    119.2491548, 119.2917271, 119.335162, 119.3794364, 119.4245283, 119.4704164,
    119.5170803, 119.5645007, 119.6126588, 119.6615366, 119.7111171, 119.7613836,
    119.8123206, 119.8639127, 119.9161456, 119.9690053, 120.0224787, 120.0765529,
    120.1312159, 120.186456, 120.242262, 120.2986233, 120.3555298, 120.4129717,
    120.4709397, 120.529425, 120.5884192, 120.647914, 120.7079019, 120.7683754,
    120.8293276, 120.8907517, 120.9526412, 121.0149897, 121.077791, 121.1410382,
    121.2047236, 121.2688371, 121.3333637, 121.3982776, 121.4635312, 121.5290318,
    121.5945941, 121.6598434, 121.7240238, 121.7856353, 121.8418258, 121.8876628,
    121.9162482, 121.9220218, 121.9072381, 121.8819525, 121.8547254, 121.8291525,
    121.8062746, 121.7863116, 121.7692521, 121.755022, 121.743531, 121.7346864,
    121.7283974, 121.7245758, 121.7231367, 121.7239981, 121.7270813, 121.7323106,
    121.7396131, 121.7489188, 121.7601602, 121.7732726, 121.7881937, 121.8048634,
    121.8232243, 121.8432208, 121.8647997, 121.8879098, 121.9125019, 121.9385285,
    121.9659441, 121.9947051, 122.0247692, 122.0560962, 122.0886471, 122.1223846,
    122.1572727, 122.193277, 122.2303642, 122.2685027, 122.3076617, 122.3478118,
    122.3889247, 122.4309734, 122.4739318, 122.5177748, 122.5624784, 122.6080194,
    122.6543758, 122.7015262, 122.7494502, 122.7981281, 122.8475413, 122.8976715,
    122.9485015, 123.0000147, 123.052195, 123.1050273, 123.1584967, 123.2125894,
    123.2672917, 123.3225908, 123.3784742, 123.4349301, 123.4919468, 123.5495134,
    123.6076191, 123.6662531, 123.7254048, 123.785063, 123.8452148, 123.9058449,
    123.9669324, 124.0284457, 124.0903336, 124.1525075, 124.2148092, 124.2769508,
    124.3384063, 124.3982222, 124.4547209, 124.50513, 124.5454213, 124.571146,
    124.5800903, 124.5751032, 124.5626531, 124.5482564, 124.534761, 124.5232834,
    124.5141892, 124.5075606, 124.5033765, 124.5015787, 124.5020964, 124.5048555,
    124.509782, 124.5168036, 124.5258502, 124.5368541, 124.5497502, 124.5644756,
    124.5809698, 124.5991746, 124.619034, 124.6404942, 124.6635033, 124.6880115,
    124.7139708, 124.741335, 124.7700599, 124.8001027, 124.8314223, 124.8639794,
    124.897736, 124.9326555, 124.9687028, 125.0058443, 125.0440474, 125.083281,
    125.1235151, 125.1647208, 125.2068705, 125.2499374, 125.2938961, 125.3387219,
    125.3843911, 125.430881, 125.4781699, 125.5262366, 125.5750611, 125.6246239,
    125.6749064, 125.7258908, 125.7775596, 125.8298962, 125.8828846, 125.936509,
    125.9907539, 126.0456042, 126.1010441, 126.1570574, 126.2136258, 126.270728,
    126.3283368, 126.3864148, 126.4449067, 126.5037268, 126.5627372, 126.6217099,
    126.680266, 126.7377765, 126.7932168, 126.8449875, 126.8907887, 126.9277937,
    126.9534993, 126.9672564, 126.9712669, 126.9695299, 126.9656974, 126.9656974
]
    BF_data = [ 114.7195766, 114.5576276, 114.4024884, 114.2541323, 114.1123291, 
    113.9768291, 113.8473881, 113.7237704, 113.6057494, 113.493107, 113.3856337, 
    113.2831278, 113.1853955, 113.0922502, 113.0035128, 112.9190107, 112.838578, 
    112.7620554, 112.6892894, 112.6201325, 112.5544427, 112.4920837, 112.4329241, 
    112.3768377, 112.3237031, 112.2734035, 112.2258265, 112.1808641, 112.1384124, 
    112.0983713, 112.0606447, 112.0251401, 111.9917684, 111.960444, 111.9310847, 
    111.9036111, 111.8779469, 111.854019, 111.8317566, 111.811092, 111.7919598, 
    111.774297, 111.7580434, 111.7431406, 111.7295327, 111.7171657, 111.7059879, 
    111.6959493, 111.6870019, 111.6790995, 111.6721975, 111.6662532, 111.6612253, 
    111.6570741, 111.6537615, 111.6512507, 111.6495063, 111.6484942, 111.6481816, 
    111.6485368, 111.6495296, 111.6511304, 111.6533113, 111.6560449, 111.659305, 
    111.6630666, 111.6673052, 111.6719976, 111.677121, 111.6826539, 111.6885752, 
    111.6948649, 111.7015034, 111.708472, 111.7157527, 111.723328, 111.7311812, 
    111.739296, 111.7476568, 111.7562486, 111.7650568, 111.7740675, 111.783267, 
    111.7926424, 111.8021811, 111.8118709, 111.8217, 111.8316573, 111.841732, 
    111.8519137, 111.862193, 111.8725616, 111.8830136, 111.8935477, 111.9041727, 
    111.9149202, 111.9258722, 111.9372246, 111.9494319, 111.9635353, 111.9819098, 
    112.0099557, 112.0598891, 112.1589847, 112.366235, 112.7997368, 113.6532289, 
    115.0868888, 116.8149162, 117.9702776, 118.2835184, 118.2357082, 118.1073098, 
    117.9678693, 117.8311657, 117.6997719, 117.5740463, 117.4538963, 117.3391369, 
    117.2295685, 117.1249932, 117.0252194, 116.9300624, 116.8393443, 116.7528939, 
    116.6705464, 116.5921433, 116.5175321, 116.446566, 116.3791037, 116.3150093, 
    116.254152, 116.1964059, 116.1416499, 116.0897675, 116.0406464, 115.9941786, 
    115.9502603, 115.9087915, 115.869676, 115.832821, 115.7981376, 115.7655398, 
    115.734945, 115.7062739, 115.6794498, 115.6543992, 115.6310512, 115.6093374, 
    115.5891923, 115.5705526, 115.5533573, 115.5375481, 115.5230683, 115.5098637, 
    115.4978819, 115.4870728, 115.4773877, 115.46878, 115.4612047, 115.4546187, 
    115.4489801, 115.4442488, 115.4403863, 115.4373553, 115.4351198, 115.4336455, 
    115.4328991, 115.4328484, 115.4334627, 115.4347122, 115.4365683, 115.4390033, 
    115.4419908, 115.445505, 115.4495213, 115.4540159, 115.4589659, 115.4643493, 
    115.4701447, 115.4763317, 115.4828906, 115.4898028, 115.4970504, 115.5046167, 
    115.512487, 115.5206492, 115.5290962, 115.5378302, 115.5468715, 115.5562767, 
    115.5661753, 115.5768447, 115.5888656, 115.6034389, 115.6230404, 115.6527564, 
    115.7029779, 115.7946426, 115.968631, 116.2992961, 116.9011191, 117.8827248, 
    119.1719431, 120.3410435, 120.9615893, 121.1138954, 121.069077, 120.9668531, 
    120.8521482, 120.7376254, 120.6267517, 120.5204156, 120.4187632, 120.3217198, 
    120.2291455, 120.1408828, 120.0567721, 119.9766569, 119.9003854, 119.8278111, 
    119.7587927, 119.6931941, 119.6308844, 119.5717372, 119.5156311, 119.4624492, 
    119.4120789, 119.3644117, 119.3193433, 119.2767732, 119.2366045, 119.1987442, 
    119.1631026, 119.1295932, 119.098133, 119.0686418, 119.0410425, 119.0152609, 
    118.9912255, 118.9688674, 118.9481203, 118.9289205, 118.9112063, 118.8949186, 
    118.8800004, 118.8663967, 118.8540547, 118.8429234, 118.8329536, 118.8240983, 
    118.8163117, 118.8095502, 118.8037714, 118.7989346, 118.7950008, 118.791932, 
    118.789692, 118.7882458, 118.7875596, 118.787601, 118.788339, 118.7897436, 
    118.7917862, 118.79444, 118.7976795, 118.8014818, 118.8058271, 118.8107005, 
    118.8160956, 118.8220198, 118.8285057, 118.835631, 118.8435555, 118.8525912, 
    118.8633315, 118.8768953, 118.8953827, 118.9227234, 118.9662319, 119.03936, 
    119.1662146, 119.3877177, 119.7657788, 120.371571, 121.2294931, 122.2144591, 
    123.041592, 123.5063799, 123.6613661, 123.6560521, 123.5876258, 123.4982592, 
    123.4038889, 123.3103301, 123.2196824, 123.1326703, 123.0494968, 122.9701616, 
    122.8945836, 122.8226503, 122.7542378, 122.6892199, 122.6274715, 122.5688705, 
    122.5132986, 122.460641, 122.4107873, 122.3636308, 122.3190687, 122.277002, 
    122.2373354, 122.1999767, 122.1648376, 122.1318327, 122.1008798, 122.0718998, 
    122.0448165, 122.0195565, 121.996049, 121.9742259, 121.9540215, 121.9353726, 
    121.9182185, 121.9025003, 121.8881616, 121.875148, 121.8634072, 121.8528886, 
    121.8435438, 121.8353261, 121.8281906, 121.8220943, 121.8169961, 121.8128567, 
    121.8096391, 121.8073086, 121.8058335, 121.8051861, 121.8053442, 121.8062934, 
    121.8080319, 121.8105774, 121.8139795, 121.8183404, 121.8238503, 121.8308484, 
    121.8399266, 121.8521095, 121.8691621, 121.894116, 121.932149, 121.9920097, 
    122.0881551, 122.2434704, 122.4912578, 122.8721636, 123.4169643, 124.1075288, 
    124.8373905, 125.4422022, 125.8178351, 125.9836261, 126.0177926, 126.0177926]

    def __init__(self) -> None:
        self.stocks = {"HydroCorp": 115.309746, "BrightFuture": 114.8867387}

    def updateMarket(self):
        self.stocks["HydroCorp"] = self.HC_data.pop(0)
        self.stocks["BrightFuture"] = self.BF_data.pop(0)
 
class Portfolio:
    def __init__(self) -> None:
        self.shares = {"HydroCorp": 0, "BrightFuture": 0}
        self.cash = 100000

    def evaluate(self, curMarket: Market) -> float:
        valueA = self.shares["HydroCorp"] * curMarket.stocks["HydroCorp"]
        valueB = self.shares["BrightFuture"] * curMarket.stocks["BrightFuture"]

        return valueA + valueB + self.cash

    def sell(self, stock_TSLA: str, sharesToSell: float, curMarket: Market) -> None:
        if sharesToSell <= 0:
            raise ValueError("Number of shares must be positive")

        if sharesToSell > self.shares[stock_TSLA]:
            raise ValueError("Attempted to sell more stock than is available")

        self.shares[stock_TSLA] -= sharesToSell
        self.cash += (1 - Market.transaction_fee) * sharesToSell * curMarket.stocks[stock_TSLA]

    def buy(self, stock_TSLA: str, sharesToBuy: float, curMarket: Market) -> None:
        if sharesToBuy <= 0:
            raise ValueError("Number of shares must be positive")
        
        cost = (1 + Market.transaction_fee) * sharesToBuy * curMarket.stocks[stock_TSLA]
        if cost > self.cash:
            raise ValueError("Attempted to spend more cash than available")

        self.shares[stock_TSLA] += sharesToBuy
        self.cash -= cost

class Context:
    def __init__(self) -> None:
        pass

    # PUT WHATEVER YOU WANT HERE

def update_portfolio(curMarket: Market, curPortfolio: Portfolio, context: Context):
    # YOUR TRADING STRATEGY GOES HERE
    pass
    

###SIMULATION###
market = Market()
portfolio = Portfolio()
context = Context()

for i in range(365):
    update_portfolio(market, portfolio, context)
    market.updateMarket()

print(portfolio.evaluate(market))


